import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { MongoRepository } from 'typeorm';
import { ObjectId } from 'mongodb';
import { Category } from './entities/category.entity';
import { CreateCategoryDto } from './dto/create-category.dto';
import { UpdateCategoryDto } from './dto/update-category.dto';
import { Product } from '../products/entities/product.entity';
import { Subcategory } from '../subcategory/entities/subcategory.entity'; // ‚úÖ IMPORT

@Injectable()
export class CategoryService {
  constructor(
    @InjectRepository(Category)
    private categoryRepository: MongoRepository<Category>,
    @InjectRepository(Product)
    private productRepository: MongoRepository<Product>,
    @InjectRepository(Subcategory) // ‚úÖ INJECT
    private subCategoryRepository: MongoRepository<Subcategory>,
  ) {}

  async create(createCategoryDto: CreateCategoryDto): Promise<Category> {
    try {
      // Ki·ªÉm tra t√™n category ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingCategory = await this.categoryRepository.findOne({
        where: { name: createCategoryDto.name }
      });
      
      if (existingCategory) {
        throw new BadRequestException(`Danh m·ª•c v·ªõi t√™n "${createCategoryDto.name}" ƒë√£ t·ªìn t·∫°i`);
      }

      // T·∫°o category m·ªõi
      const newCategory = this.categoryRepository.create({
        ...createCategoryDto,
        isActive: createCategoryDto.isActive !== undefined ? createCategoryDto.isActive : true,
      });
      return this.categoryRepository.save(newCategory);
    } catch (error) {
      if (error instanceof BadRequestException) {
        throw error;
      }
      throw new BadRequestException('Kh√¥ng th·ªÉ t·∫°o danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  async findAll(): Promise<Category[]> {
    // ‚úÖ B·ªè filter isActive, tr·∫£ v·ªÅ t·∫•t c·∫£ categories
    return this.categoryRepository.find({
      order: { createdAt: 'DESC' }
    });
  }

  async findOne(id: string): Promise<Category> {
    if (!ObjectId.isValid(id)) {
      throw new BadRequestException(`ID kh√¥ng h·ª£p l·ªá: ${id}`);
    }

    const objectId = new ObjectId(id);
    
    // ‚úÖ B·ªè filter isActive, t√¨m category b·∫•t k·ªÉ tr·∫°ng th√°i
    const category = await this.categoryRepository.findOne({
      where: { _id: objectId }
    });
    
    if (!category) {
      throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID ${id}`);
    }
    
    return category;
  }

  async update(id: string, updateCategoryDto: UpdateCategoryDto): Promise<Category> {
    try {
      // Ki·ªÉm tra ObjectId h·ª£p l·ªá
      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);
      
      // Ki·ªÉm tra category c√≥ t·ªìn t·∫°i kh√¥ng
      const existingCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });
      
      if (!existingCategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID ${id}`);
      }

      // N·∫øu c√≥ thay ƒë·ªïi t√™n, ki·ªÉm tra t√™n m·ªõi c√≥ b·ªã tr√πng kh√¥ng
      if (updateCategoryDto.name && updateCategoryDto.name !== existingCategory.name) {
        const duplicateCategory = await this.categoryRepository.findOne({
          where: { name: updateCategoryDto.name }
        });
        
        if (duplicateCategory) {
          throw new BadRequestException(`Danh m·ª•c v·ªõi t√™n "${updateCategoryDto.name}" ƒë√£ t·ªìn t·∫°i`);
        }
      }

      // C·∫≠p nh·∫≠t category
      await this.categoryRepository.update(objectId, {
        ...updateCategoryDto,
        updatedAt: new Date()
      });
      return this.findOne(id);
    } catch (error) {
      console.error('Update category error:', error);
      if (error instanceof BadRequestException) {
        throw error;
      }
      throw new BadRequestException('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  // ‚úÖ Toggle status (true ‚Üî false) v·ªõi ki·ªÉm tra s·∫£n ph·∫©m
  async toggleStatus(id: string): Promise<Category> {
    try {
      console.log(`üîÑ Toggling category status: ID=${id}`);
      
      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID danh m·ª•c kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);
      
      // ===== B∆Ø·ªöC 1: T√åM CATEGORY =====
      const existingCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingCategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${id}`);
      }

      // ===== B∆Ø·ªöC 2: X√ÅC ƒê·ªäNH TR·∫†NG TH√ÅI HI·ªÜN T·∫†I =====
      let currentStatus: boolean;
      if (typeof existingCategory.isActive === 'string') {
        currentStatus = existingCategory.isActive === 'true';
      } else {
        currentStatus = Boolean(existingCategory.isActive);
      }

      const newStatus = !currentStatus;

      console.log(`Current status: ${currentStatus} ‚Üí New status: ${newStatus}`);

      // ===== B∆Ø·ªöC 3: KI·ªÇM TRA R√ÄNG BU·ªòC KHI CHUY·ªÇN ACTIVE ‚Üí INACTIVE =====
      if (currentStatus === true && newStatus === false) {
        console.log('‚ö†Ô∏è Attempting to deactivate category, checking constraints...');

        // ‚úÖ KI·ªÇM TRA SUBCATEGORIES ƒêANG HO·∫†T ƒê·ªòNG
        const activeSubCategories = await this.subCategoryRepository.count({
          where: { 
            categoryId: objectId,
            isActive: true 
          }
        });

        if (activeSubCategories > 0) {
          throw new BadRequestException(
            `‚ùå Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a danh m·ª•c "${existingCategory.name}" v√¨ c√≤n ${activeSubCategories} danh m·ª•c con ƒëang ho·∫°t ƒë·ªông.\n\n` +
            `Vui l√≤ng v√¥ hi·ªáu h√≥a t·∫•t c·∫£ danh m·ª•c con tr∆∞·ªõc.`
          );
        }

        console.log(`‚úÖ No active subcategories found`);

        // ‚úÖ KI·ªÇM TRA PRODUCTS ƒêANG HO·∫†T ƒê·ªòNG
        const activeProducts = await this.productRepository.count({
          where: { 
            categoryId: objectId,
            isActive: true 
          }
        });

        if (activeProducts > 0) {
          throw new BadRequestException(
            `‚ùå Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a danh m·ª•c "${existingCategory.name}" v√¨ c√≤n ${activeProducts} s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông.\n\n` +
            `Vui l√≤ng v√¥ hi·ªáu h√≥a ho·∫∑c chuy·ªÉn t·∫•t c·∫£ s·∫£n ph·∫©m sang danh m·ª•c kh√°c tr∆∞·ªõc.`
          );
        }

        console.log(`‚úÖ No active products found`);
      }

      // ===== B∆Ø·ªöC 4: C√ÅC KI·ªÇM TRA B·ªî SUNG KHI CHUY·ªÇN INACTIVE ‚Üí ACTIVE =====
      if (currentStatus === false && newStatus === true) {
        console.log('‚ÑπÔ∏è Reactivating category (no constraints needed)');
        
        // ‚úÖ OPTIONAL: Ki·ªÉm tra subcategories c√≥ t·ªìn t·∫°i kh√¥ng
        const totalSubCategories = await this.subCategoryRepository.count({
          where: { categoryId: objectId }
        });

        if (totalSubCategories === 0) {
          console.warn(`‚ö†Ô∏è Warning: Category "${existingCategory.name}" has no subcategories`);
        }
      }

      // ===== B∆Ø·ªöC 5: C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI =====
      await this.categoryRepository.update(
        { _id: objectId },
        { 
          isActive: newStatus,
          updatedAt: new Date()
        }
      );

      // ===== B∆Ø·ªöC 6: TR·∫¢ V·ªÄ CATEGORY ƒê√É C·∫¨P NH·∫¨T =====
      const updatedCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!updatedCategory) {
        throw new BadRequestException(`Kh√¥ng th·ªÉ l·∫•y danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t v·ªõi ID: ${id}`);
      }

      console.log(`‚úÖ Category status toggled successfully: ${existingCategory.name} ‚Üí ${newStatus ? 'ACTIVE' : 'INACTIVE'}`);
      
      return updatedCategory;

    } catch (error) {
      console.error('‚ùå Error toggling category status:', error);
      
      if (error instanceof BadRequestException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói thay ƒë·ªïi tr·∫°ng th√°i danh m·ª•c: ${error.message}`);
    }
  }

  // ‚úÖ HARD DELETE - X√ìA Vƒ®NH VI·ªÑN KH·ªéI DATABASE
async remove(id: string): Promise<{ message: string; deletedCategory: { id: string; name: string } }> {
  try {
    console.log(`üóëÔ∏è Hard deleting category: ID=${id}`);
    
    if (!ObjectId.isValid(id)) {
      throw new BadRequestException(`ID danh m·ª•c kh√¥ng h·ª£p l·ªá: ${id}`);
    }

    const objectId = new ObjectId(id);
    
    // ===== B∆Ø·ªöC 1: T√åM CATEGORY =====
    const existingCategory = await this.categoryRepository.findOne({
      where: { _id: objectId }
    });

    if (!existingCategory) {
      throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${id}`);
    }

    console.log(`Found category: "${existingCategory.name}"`);

    // ===== B∆Ø·ªöC 2: KI·ªÇM TRA SUBCATEGORIES (B·∫§T K·ªÇ TR·∫†NG TH√ÅI) =====
    const totalSubCategories = await this.subCategoryRepository.count({
      where: { categoryId: objectId }
    });

    if (totalSubCategories > 0) {
      throw new BadRequestException(
        `‚ùå Kh√¥ng th·ªÉ x√≥a danh m·ª•c "${existingCategory.name}" v√¨ c√≤n ${totalSubCategories} danh m·ª•c con.\n\n` +
        `Vui l√≤ng x√≥a t·∫•t c·∫£ danh m·ª•c con tr∆∞·ªõc.`
      );
    }

    console.log(`‚úÖ No subcategories found`);

    // ===== B∆Ø·ªöC 3: KI·ªÇM TRA PRODUCTS (B·∫§T K·ªÇ TR·∫†NG TH√ÅI) =====
    const totalProducts = await this.productRepository.count({
      where: { categoryId: objectId }
    });

    if (totalProducts > 0) {
      throw new BadRequestException(
        `‚ùå Kh√¥ng th·ªÉ x√≥a danh m·ª•c "${existingCategory.name}" v√¨ c√≤n ${totalProducts} s·∫£n ph·∫©m.\n\n` +
        `Vui l√≤ng x√≥a ho·∫∑c chuy·ªÉn t·∫•t c·∫£ s·∫£n ph·∫©m sang danh m·ª•c kh√°c tr∆∞·ªõc.`
      );
    }

    console.log(`‚úÖ No products found`);

    // ===== B∆Ø·ªöC 4: X√ìA Vƒ®NH VI·ªÑN KH·ªéI DATABASE =====
    await this.categoryRepository.delete({ _id: objectId });

    console.log(`‚úÖ Category permanently deleted: "${existingCategory.name}"`);

    // ===== B∆Ø·ªöC 5: TR·∫¢ V·ªÄ TH√îNG B√ÅO =====
    return {
      message: `ƒê√£ x√≥a vƒ©nh vi·ªÖn danh m·ª•c "${existingCategory.name}" kh·ªèi h·ªá th·ªëng`,
      deletedCategory: {
        id: id,
        name: existingCategory.name
      }
    };

  } catch (error) {
    console.error('‚ùå Error hard deleting category:', error);
    
    if (error instanceof BadRequestException) {
      throw error;
    }
    
    throw new BadRequestException(`L·ªói x√≥a danh m·ª•c: ${error.message}`);
  }
}
}
