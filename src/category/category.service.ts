import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { MongoRepository } from 'typeorm';
import { ObjectId } from 'mongodb';
import { Category } from './entities/category.entity';
import { CreateCategoryDto } from './dto/create-category.dto';
import { UpdateCategoryDto } from './dto/update-category.dto';
import { Product } from '../products/entities/product.entity';

@Injectable()
export class CategoryService {
  constructor(
    @InjectRepository(Category)
    private categoryRepository: MongoRepository<Category>,
    @InjectRepository(Product)
    private productRepository: MongoRepository<Product>,
  ) {}

  async create(createCategoryDto: CreateCategoryDto): Promise<Category> {
    try {
      // Ki·ªÉm tra t√™n category ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingCategory = await this.categoryRepository.findOne({
        where: { name: createCategoryDto.name }
      });
      
      if (existingCategory) {
        throw new BadRequestException(`Danh m·ª•c v·ªõi t√™n "${createCategoryDto.name}" ƒë√£ t·ªìn t·∫°i`);
      }

      // T·∫°o category m·ªõi
      const newCategory = this.categoryRepository.create({
        ...createCategoryDto,
        isActive: createCategoryDto.isActive !== undefined ? createCategoryDto.isActive : true,
      });
      return this.categoryRepository.save(newCategory);
    } catch (error) {
      if (error instanceof BadRequestException) {
        throw error;
      }
      throw new BadRequestException('Kh√¥ng th·ªÉ t·∫°o danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  async findAll(): Promise<Category[]> {
    // ‚úÖ B·ªè filter isActive, tr·∫£ v·ªÅ t·∫•t c·∫£ categories
    return this.categoryRepository.find({
      order: { createdAt: 'DESC' }
    });
  }

  async findOne(id: string): Promise<Category> {
    if (!ObjectId.isValid(id)) {
      throw new BadRequestException(`ID kh√¥ng h·ª£p l·ªá: ${id}`);
    }

    const objectId = new ObjectId(id);
    
    // ‚úÖ B·ªè filter isActive, t√¨m category b·∫•t k·ªÉ tr·∫°ng th√°i
    const category = await this.categoryRepository.findOne({
      where: { _id: objectId }
    });
    
    if (!category) {
      throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID ${id}`);
    }
    
    return category;
  }

  async update(id: string, updateCategoryDto: UpdateCategoryDto): Promise<Category> {
    try {
      // Ki·ªÉm tra ObjectId h·ª£p l·ªá
      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);
      
      // Ki·ªÉm tra category c√≥ t·ªìn t·∫°i kh√¥ng
      const existingCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });
      
      if (!existingCategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID ${id}`);
      }

      // N·∫øu c√≥ thay ƒë·ªïi t√™n, ki·ªÉm tra t√™n m·ªõi c√≥ b·ªã tr√πng kh√¥ng
      if (updateCategoryDto.name && updateCategoryDto.name !== existingCategory.name) {
        const duplicateCategory = await this.categoryRepository.findOne({
          where: { name: updateCategoryDto.name }
        });
        
        if (duplicateCategory) {
          throw new BadRequestException(`Danh m·ª•c v·ªõi t√™n "${updateCategoryDto.name}" ƒë√£ t·ªìn t·∫°i`);
        }
      }

      // C·∫≠p nh·∫≠t category
      await this.categoryRepository.update(objectId, {
        ...updateCategoryDto,
        updatedAt: new Date()
      });
      return this.findOne(id);
    } catch (error) {
      console.error('Update category error:', error);
      if (error instanceof BadRequestException) {
        throw error;
      }
      throw new BadRequestException('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  // ‚úÖ Toggle status (true ‚Üî false) v·ªõi ki·ªÉm tra s·∫£n ph·∫©m
  async toggleStatus(id: string): Promise<Category> {
    try {
      console.log(`üîÑ Toggling category status: ID=${id}`);
      
      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID danh m·ª•c kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);
      
      // Find current category
      const existingCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingCategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${id}`);
      }

      // Handle both string and boolean isActive values
      let currentStatus: boolean;
      if (typeof existingCategory.isActive === 'string') {
        currentStatus = existingCategory.isActive === 'true';
      } else {
        currentStatus = Boolean(existingCategory.isActive);
      }

      const newStatus = !currentStatus;

      // N·∫øu ƒëang chuy·ªÉn t·ª´ active sang inactive, ki·ªÉm tra c√≥ s·∫£n ph·∫©m kh√¥ng
      if (currentStatus === true && newStatus === false) {
        const productsInCategory = await this.productRepository.count({
          where: { 
            categoryId: objectId,
            isActive: true 
          }
        });

        if (productsInCategory > 0) {
          throw new BadRequestException(
            `Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a danh m·ª•c "${existingCategory.name}" v√¨ c√≤n ${productsInCategory} s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng v√¥ hi·ªáu h√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong danh m·ª•c tr∆∞·ªõc.`
          );
        }
      }

      // Update status
      await this.categoryRepository.update(
        { _id: objectId },
        { 
          isActive: newStatus,
          updatedAt: new Date()
        }
      );

      // Get updated category
      const updatedCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!updatedCategory) {
        throw new BadRequestException(`Kh√¥ng th·ªÉ l·∫•y danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t v·ªõi ID: ${id}`);
      }

      console.log(`‚úÖ Category status toggled: ${existingCategory.name} -> ${newStatus ? 'active' : 'inactive'}`);
      return updatedCategory;

    } catch (error) {
      console.error('‚ùå Error toggling category status:', error);
      
      if (error instanceof BadRequestException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói thay ƒë·ªïi tr·∫°ng th√°i danh m·ª•c: ${error.message}`);
    }
  }

  // ‚úÖ Soft delete (always set to false) v·ªõi ki·ªÉm tra s·∫£n ph·∫©m
  async softDelete(id: string): Promise<Category> {
    try {
      console.log(`üóëÔ∏è Soft deleting category: ID=${id}`);
      
      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID danh m·ª•c kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);
      
      // Find category
      const existingCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingCategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${id}`);
      }

      // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m trong danh m·ª•c kh√¥ng
      const productsInCategory = await this.productRepository.count({
        where: { 
          categoryId: objectId,
          isActive: true 
        }
      });

      if (productsInCategory > 0) {
        throw new BadRequestException(
          `Kh√¥ng th·ªÉ x√≥a danh m·ª•c "${existingCategory.name}" v√¨ c√≤n ${productsInCategory} s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng x√≥a ho·∫∑c chuy·ªÉn t·∫•t c·∫£ s·∫£n ph·∫©m sang danh m·ª•c kh√°c tr∆∞·ªõc.`
        );
      }

      // Always set to false when deleting
      await this.categoryRepository.update(
        { _id: objectId },
        { 
          isActive: false,
          updatedAt: new Date()
        }
      );

      // Get updated category
      const updatedCategory = await this.categoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!updatedCategory) {
        throw new BadRequestException(`Kh√¥ng th·ªÉ l·∫•y danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t v·ªõi ID: ${id}`);
      }

      console.log(`‚úÖ Category soft deleted: ${existingCategory.name}`);
      return updatedCategory;

    } catch (error) {
      console.error('‚ùå Error soft deleting category:', error);
      
      if (error instanceof BadRequestException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói x√≥a danh m·ª•c: ${error.message}`);
    }
  }

  async remove(id: string): Promise<void> {
    if (!ObjectId.isValid(id)) {
      throw new BadRequestException(`ID kh√¥ng h·ª£p l·ªá: ${id}`);
    }

    const objectId = new ObjectId(id);
    await this.categoryRepository.delete(objectId);
  }
}
