import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Put,
  UseInterceptors, 
  UploadedFiles 
} from '@nestjs/common';
import { FilesInterceptor } from '@nestjs/platform-express';
import { ProductsService } from './products.service';
import { CreateProductDto } from './dto/create-product.dto';

@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  // GET /products - L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
  @Get()
  async findAll() {
    try {
      console.log('üìã GET /products');
      const products = await this.productsService.findAll();
      return products;
    } catch (error) {
      console.error('‚ùå Error in findAll controller:', error);
      throw error;
    }
  }

  // GET /products/:id - L·∫•y s·∫£n ph·∫©m theo ID
  @Get(':id')
  async findOne(@Param('id') id: string) {
    try {
      console.log(`üìã GET /products/${id}`);
      const product = await this.productsService.findOne(id);
      return {
        success: true,
        data: product
      };
    } catch (error) {
      console.error('‚ùå Error in findOne controller:', error);
      throw error;
    }
  }

  // ‚úÖ PATCH /products/:id/toggle - Toggle tr·∫°ng th√°i (true ‚Üî false)
  @Patch(':id/toggle')
  async toggleStatus(@Param('id') id: string) {
    try {
      console.log(`üîÑ PATCH /products/${id}/toggle`);
      
      const updatedProduct = await this.productsService.toggleStatus(id);
      
      return {
        success: true,
        message: `S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ${updatedProduct.isActive ? 'k√≠ch ho·∫°t' : 't·∫°m d·ª´ng'}`,
        data: updatedProduct,
        newStatus: updatedProduct.isActive ? 'active' : 'inactive'
      };
    } catch (error) {
      console.error('‚ùå Error in toggleStatus controller:', error);
      throw error;
    }
  }

  // ‚úÖ DELETE /products/:id - Soft delete (lu√¥n chuy·ªÉn th√†nh false)
  @Delete(':id')
  async softDelete(@Param('id') id: string) {
    try {
      console.log(`üóëÔ∏è DELETE /products/${id}`);
      
      const deletedProduct = await this.productsService.softDelete(id);
      
      return {
        success: true,
        message: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i t·∫°m d·ª´ng',
        data: deletedProduct
      };
    } catch (error) {
      console.error('‚ùå Error in softDelete controller:', error);
      throw error;
    }
  }

  // POST /products - T·∫°o s·∫£n ph·∫©m m·ªõi
  @Post()
  @UseInterceptors(FilesInterceptor('files', 10))
  async create(
    @Body() createProductDto: CreateProductDto,
    @UploadedFiles() files: Express.Multer.File[]
  ) {
    try {
      console.log('üìù POST /products');
      const product = await this.productsService.create(createProductDto, files);
      return {
        success: true,
        message: 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng',
        data: product
      };
    } catch (error) {
      console.error('‚ùå Error in create controller:', error);
      throw error;
    }
  }

  // ‚úÖ PUT /products/:id - Full update s·∫£n ph·∫©m
  @Put(':id')
  @UseInterceptors(FilesInterceptor('files', 10))
  async update(
    @Param('id') id: string,
    @Body() updateProductDto: CreateProductDto,
    @UploadedFiles() files: Express.Multer.File[]
  ) {
    try {
      console.log(`üìù PUT /products/${id}`);
      console.log('Update data:', updateProductDto);
      console.log('Files count:', files?.length || 0);
      
      const updatedProduct = await this.productsService.update(id, updateProductDto, files);
      
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
        data: updatedProduct
      };
    } catch (error) {
      console.error('‚ùå Error in update controller:', error);
      throw error;
    }
  }

  // ‚úÖ PATCH /products/:id - Partial update s·∫£n ph·∫©m
  @Patch(':id')
  async partialUpdate(
    @Param('id') id: string,
    @Body() updateData: Partial<CreateProductDto>
  ) {
    try {
      console.log(`üîß PATCH /products/${id}`);
      console.log('Partial update data:', updateData);
      
      const updatedProduct = await this.productsService.partialUpdate(id, updateData);
      
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
        data: updatedProduct
      };
    } catch (error) {
      console.error('‚ùå Error in partialUpdate controller:', error);
      throw error;
    }
  }
}
