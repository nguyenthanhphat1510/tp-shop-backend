import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { MongoRepository } from 'typeorm';
import { ObjectId } from 'mongodb';
import { Product } from './entities/product.entity';
import { ProductVariant } from './entities/product-variant.entity';
import { CreateProductWithVariantsDto } from './dto/create-product-with-variants.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { Category } from '../category/entities/category.entity';
import { Subcategory } from '../subcategory/entities/subcategory.entity';
import { CloudinaryService } from '../cloudinary/cloudinary.service';

@Injectable()
export class ProductsService {
  constructor(
    @InjectRepository(Product)
    private productsRepository: MongoRepository<Product>,
    @InjectRepository(ProductVariant)
    private variantsRepository: MongoRepository<ProductVariant>,
    @InjectRepository(Category)
    private categoryRepository: MongoRepository<Category>,
    @InjectRepository(Subcategory)
    private subcategoryRepository: MongoRepository<Subcategory>,
    private cloudinaryService: CloudinaryService,
  ) { }

  /**
   * üÜï T·∫†O S·∫¢N PH·∫®M V·ªöI VARIANTS
   * 
   * H√†m n√†y t·∫°o m·ªôt s·∫£n ph·∫©m m·ªõi v·ªõi nhi·ªÅu bi·∫øn th·ªÉ (variants).
   * M·ªói variant c√≥ dung l∆∞·ª£ng, m√†u s·∫Øc, gi√° v√† ·∫£nh ri√™ng bi·ªát.
   * 
   * @param createProductDto - D·ªØ li·ªáu s·∫£n ph·∫©m v√† variants
   * @param files - File ·∫£nh cho t·ª´ng variant (optional)
   * @returns Promise<{ product: Product; variants: ProductVariant[] }>
   */
  async create(
    createProductDto: CreateProductWithVariantsDto,
    files?: { [fieldname: string]: Express.Multer.File[] }
  ): Promise<{ product: Product; variants: ProductVariant[] }> {
    try {
      console.log('üÜï B·∫Øt ƒë·∫ßu t·∫°o s·∫£n ph·∫©m v·ªõi variants:', createProductDto);

      // üìç B∆Ø·ªöC 1: VALIDATE CATEGORY V√Ä SUBCATEGORY
      // Chuy·ªÉn ƒë·ªïi string ID th√†nh ObjectId ƒë·ªÉ query MongoDB
      const categoryObjectId = new ObjectId(createProductDto.categoryId);
      const subcategoryObjectId = new ObjectId(createProductDto.subcategoryId);

      // Ki·ªÉm tra ƒë·ªìng th·ªùi category v√† subcategory c√≥ t·ªìn t·∫°i kh√¥ng
      const [category, subcategory] = await Promise.all([
        this.categoryRepository.findOne({ where: { _id: categoryObjectId } }),
        this.subcategoryRepository.findOne({ where: { _id: subcategoryObjectId } })
      ]);

      // N√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y category
      if (!category) {
        throw new NotFoundException(`‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID ${createProductDto.categoryId}`);
      }

      // N√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y subcategory
      if (!subcategory) {
        throw new NotFoundException(`‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c con v·ªõi ID ${createProductDto.subcategoryId}`);
      }

      // Ki·ªÉm tra subcategory c√≥ thu·ªôc v·ªÅ category ƒë√£ ch·ªçn kh√¥ng
      if (subcategory.categoryId.toString() !== categoryObjectId.toString()) {
        throw new BadRequestException('‚ùå Danh m·ª•c con kh√¥ng thu·ªôc danh m·ª•c ƒë√£ ch·ªçn');
      }

      console.log('‚úÖ Category v√† Subcategory h·ª£p l·ªá');

      // üìç B∆Ø·ªöC 2: KI·ªÇM TRA T√äN S·∫¢N PH·∫®M ƒê√É T·ªíN T·∫†I
      // T√¨m s·∫£n ph·∫©m c√≥ t√™n tr√πng trong database
      const existingProduct = await this.productsRepository.findOne({
        where: { name: createProductDto.name }
      });

      // N√©m l·ªói n·∫øu t√™n ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
      if (existingProduct) {
        throw new BadRequestException(`‚ùå S·∫£n ph·∫©m v·ªõi t√™n "${createProductDto.name}" ƒë√£ t·ªìn t·∫°i`);
      }

      console.log('‚úÖ T√™n s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng');

      // üìç B∆Ø·ªöC 3: T·∫†O S·∫¢N PH·∫®M CH√çNH (CH·ªà TH√îNG TIN C∆† B·∫¢N)
      /*
       * S·∫£n ph·∫©m ch√≠nh ch·ªâ ch·ª©a th√¥ng tin m√¥ t·∫£, kh√¥ng c√≥:
       * - Gi√° c·ª• th·ªÉ (price) - v√¨ m·ªói variant c√≥ gi√° kh√°c nhau
       * - S·ªë l∆∞·ª£ng (stock) - v√¨ m·ªói variant c√≥ stock ri√™ng
       * - ·∫¢nh (imageUrls) - v√¨ m·ªói variant c√≥ ·∫£nh theo m√†u s·∫Øc
       */
      const productData = {
        name: createProductDto.name,           // T√™n s·∫£n ph·∫©m: "iPhone 16"
        description: createProductDto.description, // M√¥ t·∫£ chi ti·∫øt
        categoryId: categoryObjectId,         // ID danh m·ª•c cha
        subcategoryId: subcategoryObjectId,   // ID danh m·ª•c con
        isActive: true                        // Tr·∫°ng th√°i ho·∫°t ƒë·ªông
        // ‚ùå KH√îNG c√≥: price, stock, imageUrls, brand
      };

      // T·∫°o instance v√† l∆∞u v√†o database
      const newProduct = this.productsRepository.create(productData);
      const savedProduct = await this.productsRepository.save(newProduct);

      console.log(`‚úÖ ƒê√£ t·∫°o s·∫£n ph·∫©m ch√≠nh: "${savedProduct.name}" v·ªõi ID: ${savedProduct._id}`);

      // üìç B∆Ø·ªöC 4: T·∫†O T·∫§T C·∫¢ VARIANTS
      /*
       * M·ªói variant ƒë·∫°i di·ªán cho m·ªôt phi√™n b·∫£n c·ª• th·ªÉ c·ªßa s·∫£n ph·∫©m:
       * - iPhone 16 128GB ƒêen: gi√° 22 tri·ªáu, stock 50
       * - iPhone 16 256GB Tr·∫Øng: gi√° 25 tri·ªáu, stock 30
       * - iPhone 16 512GB Xanh: gi√° 28 tri·ªáu, stock 20
       */
      const createdVariants: ProductVariant[] = [];

      // Duy·ªát qua t·ª´ng variant trong danh s√°ch
      for (let i = 0; i < createProductDto.variants.length; i++) {
        const variantDto = createProductDto.variants[i];

        console.log(`üîÑ ƒêang t·∫°o variant ${i + 1}/${createProductDto.variants.length}:`, {
          storage: variantDto.storage,
          color: variantDto.color,
          price: variantDto.price,
          stock: variantDto.stock
        });

        // üè∑Ô∏è T·∫†O SKU (STOCK KEEPING UNIT) - M√É ƒê·ªäNH DANH DUY NH·∫§T
        /*
         * SKU Format: "PRODUCTNAME-STORAGE-COLOR"
         * V√≠ d·ª•: 
         * - "IPHONE16-128GB-ƒêEN"
         * - "SAMSUNGGALAXYS24-256GB-TR·∫ÆNG"
         * - "XIAOMI13PRO-512GB-X√ÅNHD∆Ø∆†NG"
         */
        const sku = `${createProductDto.name.toUpperCase().replace(/\s+/g, '')}-${variantDto.storage}-${variantDto.color.toUpperCase().replace(/\s+/g, '')}`;

        console.log(`üè∑Ô∏è Generated SKU: ${sku}`);

        // Ki·ªÉm tra SKU ƒë√£ t·ªìn t·∫°i ch∆∞a (SKU ph·∫£i unique)
        const existingSku = await this.variantsRepository.findOne({
          where: { sku }
        });

        if (existingSku) {
          throw new BadRequestException(`‚ùå SKU "${sku}" ƒë√£ t·ªìn t·∫°i. Variant n√†y ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥.`);
        }

        // üì∏ UPLOAD ·∫¢NH CHO VARIANT N·∫¶Y
        /*
         * Files structure t·ª´ frontend:
         * {
         *   'variant_0_images': [file1, file2], // ·∫¢nh cho variant ƒë·∫ßu ti√™n
         *   'variant_1_images': [file3, file4], // ·∫¢nh cho variant th·ª© hai
         *   'variant_2_images': [file5, file6]  // ·∫¢nh cho variant th·ª© ba
         * }
         */
        let variantImageUrls: string[] = [];
        let variantImagePublicIds: string[] = [];

        // L·∫•y files cho variant th·ª© i
        const variantFiles = files?.[`variant_${i}_images`];

        if (variantFiles && variantFiles.length > 0) {
          console.log(`üì∏ ƒêang upload ${variantFiles.length} ·∫£nh cho variant ${variantDto.color}`);

          // Upload t·ª´ng file l√™n Cloudinary
          for (const file of variantFiles) {
            const uploadResult = await this.cloudinaryService.uploadImage(
              file,
              `tpshop/products/${savedProduct._id}/variants/${variantDto.color}` // Folder path
            );
            variantImageUrls.push(uploadResult.secure_url);     // URL ƒë·ªÉ hi·ªÉn th·ªã
            variantImagePublicIds.push(uploadResult.public_id); // ID ƒë·ªÉ x√≥a sau n√†y
          }

          console.log(`‚úÖ ƒê√£ upload th√†nh c√¥ng ${variantImageUrls.length} ·∫£nh`);
        } else {
          console.log(`‚ÑπÔ∏è Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c upload cho variant ${variantDto.color}`);
        }

        // üíæ T·∫†O V√Ä LUU VARIANT V√ÄO DATABASE
        const variantData = {
          productId: savedProduct._id,              // Link t·ªõi s·∫£n ph·∫©m ch√≠nh
          sku,                                      // M√£ SKU unique
          storage: variantDto.storage,              // Dung l∆∞·ª£ng: "128GB"
          color: variantDto.color,                  // M√†u s·∫Øc: "ƒêen"
          price: variantDto.price,                  // Gi√°: 22000000
          stock: variantDto.stock,                  // S·ªë l∆∞·ª£ng t·ªìn: 50
          imageUrls: variantImageUrls,              // Danh s√°ch URL ·∫£nh
          imagePublicIds: variantImagePublicIds,    // Danh s√°ch Public ID
          isActive: variantDto.isActive ?? true,    // Tr·∫°ng th√°i (m·∫∑c ƒë·ªãnh true)
          sold: 0                                   // S·ªë l∆∞·ª£ng ƒë√£ b√°n (m·∫∑c ƒë·ªãnh 0)
        };

        const newVariant = this.variantsRepository.create(variantData);
        const savedVariant = await this.variantsRepository.save(newVariant);
        createdVariants.push(savedVariant);

        console.log(`‚úÖ ƒê√£ t·∫°o variant: ${savedVariant.sku} v·ªõi ${savedVariant.imageUrls.length} ·∫£nh`);
      }

      // üìä TH·ªêNG K√ä K·∫æT QU·∫¢
      const totalVariants = createdVariants.length;
      const totalStock = createdVariants.reduce((sum, variant) => sum + variant.stock, 0);
      const priceRange = {
        min: Math.min(...createdVariants.map(v => v.price)),
        max: Math.max(...createdVariants.map(v => v.price))
      };

      console.log(`üéâ HO√ÄN TH√ÄNH! S·∫£n ph·∫©m "${savedProduct.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi:`);
      console.log(`   üì± ${totalVariants} variants`);
      console.log(`   üì¶ ${totalStock} s·∫£n ph·∫©m t·ªïng c·ªông`);
      console.log(`   üí∞ Gi√° t·ª´ ${priceRange.min.toLocaleString()}ƒë ƒë·∫øn ${priceRange.max.toLocaleString()}ƒë`);

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      return {
        product: savedProduct,
        variants: createdVariants
      };

    } catch (error) {
      console.error('‚ùå L·ªñI KHI T·∫†O S·∫¢N PH·∫®M:', error);

      // Gi·ªØ nguy√™n l·ªói validation v√† not found
      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }

      // Wrap c√°c l·ªói kh√°c
      throw new BadRequestException(`‚ùå L·ªói t·∫°o s·∫£n ph·∫©m: ${error.message}`);
    }
  }

  // ‚úÖ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi variants
  // C·∫≠p nh·∫≠t method findAll() ƒë·ªÉ tr·∫£ v·ªÅ structure ph√π h·ª£p:

  async findAll(): Promise<Product[]> {
    try {
      console.log('üìã Finding all products with variants');

      const products = await this.productsRepository.find({
        where: { isActive: true },
        order: { createdAt: 'DESC' }
      });

      const result: Product[] = [];

      for (const product of products) {
        const variants = await this.variantsRepository.find({
          where: { productId: product._id, isActive: true },
          order: { price: 'ASC' } // ‚úÖ S·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn
        });

        if (variants.length > 0) {
          // ‚úÖ FLAT STRUCTURE - Merge product + variants info
          const productWithVariants = {
            ...product,
            variants: variants.map(v => ({
              _id: v._id,
              storage: v.storage,
              color: v.color,
              price: v.price,
              stock: v.stock,
              images: v.imageUrls, // ‚úÖ Rename imageUrls th√†nh images
              isActive: v.isActive
            }))
          };

          result.push(productWithVariants);
        }
      }

      console.log(`‚úÖ Found ${result.length} products with variants`);
      return result;

    } catch (error) {
      console.error('‚ùå Error finding products:', error);
      throw new BadRequestException(`L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m: ${error.message}`);
    }
  }
  // ‚úÖ Toggle status product v√† t·∫•t c·∫£ variants
  async toggleStatus(id: string): Promise<{ product: Product; variants: ProductVariant[] }> {
    try {
      console.log(`üîÑ Toggling product status: ID=${id}`);

      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);

      const existingProduct = await this.productsRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingProduct) {
        throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${id}`);
      }

      const newStatus = !existingProduct.isActive;

      // C·∫≠p nh·∫≠t product v√† t·∫•t c·∫£ variants
      await Promise.all([
        this.productsRepository.update(
          { _id: objectId },
          { isActive: newStatus, updatedAt: new Date() }
        ),
        this.variantsRepository.update(
          { productId: objectId },
          { isActive: newStatus, updatedAt: new Date() }
        )
      ]);

      // L·∫•y d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
      const [updatedProduct, updatedVariants] = await Promise.all([
        this.productsRepository.findOne({ where: { _id: objectId } }),
        this.variantsRepository.find({ where: { productId: objectId } })
      ]);

      console.log(`‚úÖ Product "${existingProduct.name}" status: ${newStatus ? 'active' : 'inactive'}`);
      return { product: updatedProduct!, variants: updatedVariants };

    } catch (error) {
      console.error('‚ùå Error toggling product status:', error);

      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }

      throw new BadRequestException(`L·ªói thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m: ${error.message}`);
    }
  }

  // ‚úÖ Soft delete
  async softDelete(id: string): Promise<{ product: Product; variants: ProductVariant[] }> {
    try {
      console.log(`üóëÔ∏è Soft deleting product: ID=${id}`);

      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new ObjectId(id);

      const existingProduct = await this.productsRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingProduct) {
        throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${id}`);
      }

      // Set product v√† t·∫•t c·∫£ variants th√†nh inactive
      await Promise.all([
        this.productsRepository.update(
          { _id: objectId },
          { isActive: false, updatedAt: new Date() }
        ),
        this.variantsRepository.update(
          { productId: objectId },
          { isActive: false, updatedAt: new Date() }
        )
      ]);

      const [updatedProduct, updatedVariants] = await Promise.all([
        this.productsRepository.findOne({ where: { _id: objectId } }),
        this.variantsRepository.find({ where: { productId: objectId } })
      ]);

      console.log(`‚úÖ Product "${existingProduct.name}" soft deleted`);
      return { product: updatedProduct!, variants: updatedVariants };

    } catch (error) {
      console.error('‚ùå Error soft deleting product:', error);

      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }

      throw new BadRequestException(`L·ªói x√≥a s·∫£n ph·∫©m: ${error.message}`);
    }
  }

  // ‚úÖ T√¨m theo category
  async findByCategory(categoryId: string): Promise<Array<{ product: Product; variants: ProductVariant[] }>> {
    try {
      if (!ObjectId.isValid(categoryId)) {
        throw new BadRequestException(`ID danh m·ª•c kh√¥ng h·ª£p l·ªá: ${categoryId}`);
      }

      const categoryObjectId = new ObjectId(categoryId);

      const category = await this.categoryRepository.findOne({
        where: { _id: categoryObjectId }
      });

      if (!category) {
        throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${categoryId}`);
      }

      const products = await this.productsRepository.find({
        where: { categoryId: categoryObjectId, isActive: true },
        order: { createdAt: 'DESC' }
      });

      const result: Array<{ product: Product; variants: ProductVariant[] }> = [];

      for (const product of products) {
        const variants = await this.variantsRepository.find({
          where: { productId: product._id, isActive: true }
        });
        if (variants.length > 0) { // Ch·ªâ tr·∫£ v·ªÅ s·∫£n ph·∫©m c√≥ variants active
          result.push({ product, variants });
        }
      }

      return result;

    } catch (error) {
      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }

      throw new BadRequestException(`L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m theo danh m·ª•c: ${error.message}`);
    }
  }

  // ‚úÖ T√¨m theo kho·∫£ng gi√°
  async findByPriceRange(priceRangeId: string): Promise<Array<{ product: Product; variants: ProductVariant[] }>> {
    const priceRanges: Record<string, { min: number; max: number }> = {
      'under-5m': { min: 0, max: 5000000 },
      '5m-10m': { min: 5000000, max: 10000000 },
      '10m-20m': { min: 10000000, max: 20000000 },
      '20m-30m': { min: 20000000, max: 30000000 },
      'above-30m': { min: 30000000, max: 999999999 }
    };

    const range = priceRanges[priceRangeId];
    if (!range) {
      throw new BadRequestException('Kho·∫£ng gi√° kh√¥ng h·ª£p l·ªá');
    }

    // T√¨m variants trong kho·∫£ng gi√°
    const variants = await this.variantsRepository.find({
      where: {
        price: { $gte: range.min, $lte: range.max },
        isActive: true
      }
    });

    // L·∫•y danh s√°ch unique productIds
    const productIds = [...new Set(variants.map(v => v.productId.toString()))];

    const result: Array<{ product: Product; variants: ProductVariant[] }> = [];

    for (const productIdStr of productIds) {
      const productId = new ObjectId(productIdStr);
      const product = await this.productsRepository.findOne({
        where: { _id: productId, isActive: true }
      });

      if (product) {
        const productVariants = variants.filter(v => v.productId.toString() === productIdStr);
        result.push({ product, variants: productVariants });
      }
    }

    return result;
  }

  // ‚úÖ Gi·∫£m stock cho variant c·ª• th·ªÉ (khi ƒë·∫∑t h√†ng)
  async decreaseVariantStock(variantId: string, quantity: number): Promise<void> {
    const variant = await this.variantsRepository.findOne({
      where: { _id: new ObjectId(variantId) }
    });

    if (!variant) {
      throw new BadRequestException('Bi·∫øn th·ªÉ s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
    }

    if (variant.stock < quantity) {
      throw new BadRequestException(`Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng. C√≤n l·∫°i: ${variant.stock}`);
    }

    variant.stock -= quantity;
    variant.sold += quantity;
    await this.variantsRepository.save(variant);
  }

  // ‚úÖ L·∫•y th√¥ng tin t·ªïng quan s·∫£n ph·∫©m (cho dashboard)
  async getProductStats(): Promise<{
    totalProducts: number;
    totalVariants: number;
    totalStock: number;
    totalSold: number;
  }> {
    const [products, variants] = await Promise.all([
      this.productsRepository.find(),
      this.variantsRepository.find()
    ]);

    const totalStock = variants.reduce((sum, variant) => sum + variant.stock, 0);
    const totalSold = variants.reduce((sum, variant) => sum + variant.sold, 0);

    return {
      totalProducts: products.length,
      totalVariants: variants.length,
      totalStock,
      totalSold
    };
  }

  /**
   * üîÑ C·∫¨P NH·∫¨T S·∫¢N PH·∫®M V√Ä VARIANTS
   * 
   * Cho ph√©p:
   * - S·ª≠a th√¥ng tin s·∫£n ph·∫©m (t√™n, m√¥ t·∫£, category)
   * - Th√™m variants m·ªõi
   * - C·∫≠p nh·∫≠t variants hi·ªán c√≥
   * - X√≥a variants c≈©
   * - Upload ·∫£nh m·ªõi cho variants
   */
  async update(
    id: string,
    updateProductDto: UpdateProductDto,
    files?: { [fieldname: string]: Express.Multer.File[] }
  ): Promise<{ product: Product; variants: ProductVariant[] }> {
    try {
      console.log('üîÑ Updating product:', id, updateProductDto);

      // Validate product ID
      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const productObjectId = new ObjectId(id);

      // T√¨m s·∫£n ph·∫©m hi·ªán t·∫°i
      const existingProduct = await this.productsRepository.findOne({
        where: { _id: productObjectId }
      });

      if (!existingProduct) {
        throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${id}`);
      }

      // üìç B∆Ø·ªöC 1: C·∫¨P NH·∫¨T TH√îNG TIN S·∫¢N PH·∫®M CH√çNH
      const updateData: Partial<Product> = {
        updatedAt: new Date()
      };

      if (updateProductDto.name) {
        // Ki·ªÉm tra t√™n m·ªõi c√≥ b·ªã tr√πng kh√¥ng (tr·ª´ ch√≠nh n√≥)
        const duplicateName = await this.productsRepository.findOne({
          where: { 
            name: updateProductDto.name,
            _id: { $ne: productObjectId } // Exclude current product
          }
        });

        if (duplicateName) {
          throw new BadRequestException(`T√™n s·∫£n ph·∫©m "${updateProductDto.name}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`);
        }

        updateData.name = updateProductDto.name;
      }

      if (updateProductDto.description) {
        updateData.description = updateProductDto.description;
      }

      // Validate v√† c·∫≠p nh·∫≠t category n·∫øu c√≥
      if (updateProductDto.categoryId) {
        const categoryId = new ObjectId(updateProductDto.categoryId);
        const category = await this.categoryRepository.findOne({
          where: { _id: categoryId }
        });

        if (!category) {
          throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${updateProductDto.categoryId}`);
        }

        updateData.categoryId = categoryId;
      }

      // Validate v√† c·∫≠p nh·∫≠t subcategory n·∫øu c√≥
      if (updateProductDto.subcategoryId) {
        const subcategoryId = new ObjectId(updateProductDto.subcategoryId);
        const subcategory = await this.subcategoryRepository.findOne({
          where: { _id: subcategoryId }
        });

        if (!subcategory) {
          throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c con v·ªõi ID: ${updateProductDto.subcategoryId}`);
        }

        updateData.subcategoryId = subcategoryId;
      }

      // C·∫≠p nh·∫≠t s·∫£n ph·∫©m ch√≠nh
      await this.productsRepository.update({ _id: productObjectId }, updateData);
      console.log('‚úÖ Updated product basic info');

      // üìç B∆Ø·ªöC 2: X·ª¨ L√ù VARIANTS
      let updatedVariants: ProductVariant[] = [];

      if (updateProductDto.variants && updateProductDto.variants.length > 0) {
        console.log(`üîÑ Processing ${updateProductDto.variants.length} variants`);

        // L·∫•y t·∫•t c·∫£ variants hi·ªán t·∫°i
        const existingVariants = await this.variantsRepository.find({
          where: { productId: productObjectId }
        });

        // X·ª≠ l√Ω t·ª´ng variant trong request
        for (let i = 0; i < updateProductDto.variants.length; i++) {
          const variantDto = updateProductDto.variants[i];
          
          if (variantDto._id) {
            // üîÑ C·∫¨P NH·∫¨T VARIANT HI·ªÜN C√ì
            console.log(`üîÑ Updating existing variant: ${variantDto._id}`);
            
            const variantObjectId = new ObjectId(variantDto._id);
            const existingVariant = await this.variantsRepository.findOne({
              where: { _id: variantObjectId, productId: productObjectId }
            });

            if (!existingVariant) {
              throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y variant v·ªõi ID: ${variantDto._id}`);
            }

            // C·∫≠p nh·∫≠t th√¥ng tin variant
            const variantUpdateData: Partial<ProductVariant> = {
              storage: variantDto.storage,
              color: variantDto.color,
              price: variantDto.price,
              stock: variantDto.stock,
              isActive: variantDto.isActive ?? existingVariant.isActive,
              updatedAt: new Date()
            };

            // Upload ·∫£nh m·ªõi n·∫øu c√≥
            const variantFiles = files?.[`variant_${i}_images`];
            if (variantFiles && variantFiles.length > 0) {
              console.log(`üì∏ Uploading new images for variant ${variantDto.color}`);

              // X√≥a ·∫£nh c≈© tr√™n Cloudinary
              if (existingVariant.imagePublicIds && existingVariant.imagePublicIds.length > 0) {
                await Promise.all(
                  existingVariant.imagePublicIds.map(publicId => 
                    this.cloudinaryService.deleteImage(publicId)
                  )
                );
              }

              // Upload ·∫£nh m·ªõi
              const newImageUrls: string[] = [];
              const newPublicIds: string[] = [];

              for (const file of variantFiles) {
                const uploadResult = await this.cloudinaryService.uploadImage(
                  file,
                  `tpshop/products/${productObjectId}/variants/${variantDto.color}`
                );
                newImageUrls.push(uploadResult.secure_url);
                newPublicIds.push(uploadResult.public_id);
              }

              variantUpdateData.imageUrls = newImageUrls;
              variantUpdateData.imagePublicIds = newPublicIds;
            }

            // L∆∞u c·∫≠p nh·∫≠t
            await this.variantsRepository.update({ _id: variantObjectId }, variantUpdateData);
            
            const updatedVariant = await this.variantsRepository.findOne({
              where: { _id: variantObjectId }
            });
            
            if (updatedVariant) {
              updatedVariants.push(updatedVariant);
            }

          } else {
            // üÜï T·∫†O VARIANT M·ªöI
            console.log(`üÜï Creating new variant: ${variantDto.color} - ${variantDto.storage}`);

            // T·∫°o SKU cho variant m·ªõi
            const productName = updateData.name || existingProduct.name;
            const sku = `${productName.toUpperCase().replace(/\s+/g, '')}-${variantDto.storage}-${(variantDto.color || '').toUpperCase().replace(/\s+/g, '')}`;

            // Ki·ªÉm tra SKU tr√πng
            const existingSku = await this.variantsRepository.findOne({
              where: { sku }
            });

            if (existingSku) {
              throw new BadRequestException(`SKU "${sku}" ƒë√£ t·ªìn t·∫°i`);
            }

            // Upload ·∫£nh cho variant m·ªõi
            let newImageUrls: string[] = [];
            let newPublicIds: string[] = [];

            const variantFiles = files?.[`variant_${i}_images`];
            if (variantFiles && variantFiles.length > 0) {
              console.log(`üì∏ Uploading images for new variant ${variantDto.color}`);

              for (const file of variantFiles) {
                const uploadResult = await this.cloudinaryService.uploadImage(
                  file,
                  `tpshop/products/${productObjectId}/variants/${variantDto.color}`
                );
                newImageUrls.push(uploadResult.secure_url);
                newPublicIds.push(uploadResult.public_id);
              }
            }

            // T·∫°o variant m·ªõi
            const newVariantData = {
              productId: productObjectId,
              sku,
              storage: variantDto.storage,
              color: variantDto.color,
              price: variantDto.price,
              stock: variantDto.stock,
              imageUrls: newImageUrls,
              imagePublicIds: newPublicIds,
              isActive: variantDto.isActive ?? true,
              sold: 0
            };

            const newVariant = this.variantsRepository.create(newVariantData);
            const savedVariant = await this.variantsRepository.save(newVariant);
            updatedVariants.push(savedVariant);
          }
        }

        // üìç B∆Ø·ªöC 3: X√ìA VARIANTS KH√îNG C√íN TRONG REQUEST
        const variantIdsInRequest = updateProductDto.variants
          .filter(v => v._id)
          .map(v => v._id);

        const variantsToDelete = existingVariants.filter(
          existing => !variantIdsInRequest.includes(existing._id.toString())
        );

        if (variantsToDelete.length > 0) {
          console.log(`üóëÔ∏è Deleting ${variantsToDelete.length} removed variants`);

          for (const variantToDelete of variantsToDelete) {
            // X√≥a ·∫£nh tr√™n Cloudinary
            if (variantToDelete.imagePublicIds && variantToDelete.imagePublicIds.length > 0) {
              await Promise.all(
                variantToDelete.imagePublicIds.map(publicId => 
                  this.cloudinaryService.deleteImage(publicId)
                )
              );
            }

            // X√≥a variant kh·ªèi database
            await this.variantsRepository.delete({ _id: variantToDelete._id });
          }
        }
      } else {
        // N·∫øu kh√¥ng c√≥ variants trong request, l·∫•y variants hi·ªán c√≥
        updatedVariants = await this.variantsRepository.find({
          where: { productId: productObjectId }
        });
      }

      // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
      const updatedProduct = await this.productsRepository.findOne({
        where: { _id: productObjectId }
      });

      console.log(`‚úÖ Updated product "${updatedProduct!.name}" with ${updatedVariants.length} variants`);

      return {
        product: updatedProduct!,
        variants: updatedVariants
      };

    } catch (error) {
      console.error('‚ùå Error updating product:', error);

      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }

      throw new BadRequestException(`L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${error.message}`);
    }
  }

  /**
   * üéØ L·∫§Y S·∫¢N PH·∫®M THEO ID (CHO FORM EDIT)
   */
  async findOne(id: string): Promise<{ product: Product; variants: ProductVariant[] }> {
    try {
      console.log('üîç Finding product by ID:', id);

      if (!ObjectId.isValid(id)) {
        throw new BadRequestException(`ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const productObjectId = new ObjectId(id);

      // L·∫•y s·∫£n ph·∫©m v√† variants
      const [product, variants] = await Promise.all([
        this.productsRepository.findOne({ where: { _id: productObjectId } }),
        this.variantsRepository.find({ 
          where: { productId: productObjectId },
          order: { createdAt: 'ASC' }
        })
      ]);

      if (!product) {
        throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${id}`);
      }

      console.log(`‚úÖ Found product "${product.name}" with ${variants.length} variants`);

      return { product, variants };

    } catch (error) {
      console.error('‚ùå Error finding product:', error);

      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }

      throw new BadRequestException(`L·ªói l·∫•y th√¥ng tin s·∫£n ph·∫©m: ${error.message}`);
    }
  }
}