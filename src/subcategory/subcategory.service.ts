import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { MongoRepository, ObjectId } from 'typeorm';
import { ObjectId as MongoObjectId } from 'mongodb';
import { Subcategory } from './entities/subcategory.entity';
import { CreateSubcategoryDto } from './dto/create-subcategory.dto';
import { UpdateSubcategoryDto } from './dto/update-subcategory.dto';
import { Category } from '../category/entities/category.entity';
import { Product } from '../products/entities/product.entity';

@Injectable()
export class SubcategoryService {
  constructor(
    @InjectRepository(Subcategory)
    private subcategoryRepository: MongoRepository<Subcategory>,
    @InjectRepository(Category)
    private categoryRepository: MongoRepository<Category>,
    @InjectRepository(Product)
    private productRepository: MongoRepository<Product>,
  ) {}

  async create(createSubcategoryDto: CreateSubcategoryDto): Promise<Subcategory> {
    try {
      // Validate categoryId
      if (!MongoObjectId.isValid(createSubcategoryDto.categoryId)) {
        throw new BadRequestException(`ID danh m·ª•c cha kh√¥ng h·ª£p l·ªá: ${createSubcategoryDto.categoryId}`);
      }

      const categoryObjectId = new MongoObjectId(createSubcategoryDto.categoryId);
      
      // Check if parent category exists and is active
      const category = await this.categoryRepository.findOne({
        where: { _id: categoryObjectId }
      });

      if (!category) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c cha v·ªõi ID ${createSubcategoryDto.categoryId}`);
      }

      const isActiveCategory = category.isActive === true || (typeof category.isActive === 'string' && category.isActive === 'true');
      if (!isActiveCategory) {
        throw new BadRequestException(`Danh m·ª•c cha "${category.name}" ƒëang kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng ch·ªçn danh m·ª•c kh√°c.`);
      }

      // Check for duplicate name
      const existingSubcategory = await this.subcategoryRepository.findOne({
        where: { name: createSubcategoryDto.name }
      });

      if (existingSubcategory) {
        throw new BadRequestException(`Danh m·ª•c con v·ªõi t√™n "${createSubcategoryDto.name}" ƒë√£ t·ªìn t·∫°i`);
      }

      // ‚úÖ Create new subcategory with isActive default = true
      const newSubcategory = this.subcategoryRepository.create({
        name: createSubcategoryDto.name.trim(),
        categoryId: categoryObjectId,
        isActive: true, // Explicitly set default value
        createdAt: new Date(),
        updatedAt: new Date()
      });

      return this.subcategoryRepository.save(newSubcategory);

    } catch (error) {
      console.error('Error creating subcategory:', error);
      
      if (error instanceof BadRequestException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói t·∫°o danh m·ª•c con: ${error.message}`);
    }
  }

  async findAll(): Promise<Subcategory[]> {
    return this.subcategoryRepository.find({
      where: { isActive: true }
    });
  }

  async findByCategoryId(categoryId: string): Promise<Subcategory[]> {
    try {
      console.log('Finding subcategories for categoryId:', categoryId);
      
      const categoryObjectId = new MongoObjectId(categoryId);
      console.log('Converted to ObjectId:', categoryObjectId);
      
      const subcategories = await this.subcategoryRepository.find({
        where: { 
          categoryId: categoryObjectId, 
          isActive: true 
        }
      });
      
      console.log('Found subcategories:', subcategories.length);
      console.log('Subcategories data:', subcategories);
      
      return subcategories;
    } catch (error) {
      console.error('Error in findByCategoryId:', error);
      throw new BadRequestException(`L·ªói t√¨m danh m·ª•c con: ${error.message}`);
    }
  }

  async findOne(id: string): Promise<Subcategory> {
    const objectId = new MongoObjectId(id);
    const subcategory = await this.subcategoryRepository.findOne({
      where: { _id: objectId }
    });
    
    if (!subcategory) {
      throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c con v·ªõi ID ${id}`);
    }
    
    return subcategory;
  }

  
  async update(id: string, updateSubcategoryDto: UpdateSubcategoryDto): Promise<Subcategory> {
    try {
      console.log('Updating subcategory with ID:', id);
      console.log('Update data:', updateSubcategoryDto);

      // Ki·ªÉm tra ObjectId h·ª£p l·ªá
      if (!MongoObjectId.isValid(id)) {
        throw new BadRequestException(`ID danh m·ª•c con kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new MongoObjectId(id);
      
      // T√¨m subcategory hi·ªán t·∫°i
      const existingSubcategory = await this.subcategoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingSubcategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c con v·ªõi ID ${id}`);
      }

      // Validate categoryId m·ªõi n·∫øu c√≥
      let categoryObjectId: MongoObjectId | undefined;
      if (updateSubcategoryDto.categoryId) {
        if (typeof updateSubcategoryDto.categoryId === 'string') {
          if (!MongoObjectId.isValid(updateSubcategoryDto.categoryId)) {
            throw new BadRequestException(`ID danh m·ª•c cha kh√¥ng h·ª£p l·ªá: ${updateSubcategoryDto.categoryId}`);
          }
          categoryObjectId = new MongoObjectId(updateSubcategoryDto.categoryId);
        } else {
          categoryObjectId = updateSubcategoryDto.categoryId;
        }

        // Ki·ªÉm tra category cha c√≥ t·ªìn t·∫°i kh√¥ng
        const category = await this.categoryRepository.findOne({
          where: { _id: categoryObjectId }
        });

        if (!category) {
          throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c cha v·ªõi ID ${updateSubcategoryDto.categoryId}`);
        }

        // Ki·ªÉm tra category cha c√≥ ƒëang active kh√¥ng
        const isActiveCategory = category.isActive === true || (typeof category.isActive === 'string' && category.isActive === 'true');
        if (!isActiveCategory) {
          throw new BadRequestException(`Danh m·ª•c cha "${category.name}" ƒëang kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng ch·ªçn danh m·ª•c kh√°c.`);
        }
      }

      // Ki·ªÉm tra t√™n tr√πng l·∫∑p n·∫øu c√≥ thay ƒë·ªïi t√™n
      if (updateSubcategoryDto.name && updateSubcategoryDto.name !== existingSubcategory.name) {
        const duplicateSubcategory = await this.subcategoryRepository.findOne({
          where: { name: updateSubcategoryDto.name }
        });

        if (duplicateSubcategory && duplicateSubcategory._id.toString() !== id) {
          throw new BadRequestException(`Danh m·ª•c con v·ªõi t√™n "${updateSubcategoryDto.name}" ƒë√£ t·ªìn t·∫°i`);
        }
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
      const updateData: any = {
        updatedAt: new Date()
      };

      if (updateSubcategoryDto.name) {
        updateData.name = updateSubcategoryDto.name.trim();
      }

      if (categoryObjectId) {
        updateData.categoryId = categoryObjectId;
      }

      // C·∫≠p nh·∫≠t subcategory
      await this.subcategoryRepository.update(objectId, updateData);

      // Tr·∫£ v·ªÅ subcategory ƒë√£ c·∫≠p nh·∫≠t
      return this.findOne(id);

    } catch (error) {
      console.error('Error updating subcategory:', error);
      
      if (error instanceof BadRequestException || error instanceof NotFoundException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói c·∫≠p nh·∫≠t danh m·ª•c con: ${error.message}`);
    }
  }

  // ‚úÖ Toggle status v·ªõi ki·ªÉm tra s·∫£n ph·∫©m ch√≠nh x√°c
  async toggleStatus(id: string): Promise<Subcategory> {
    try {
      console.log(`üîÑ Toggling subcategory status: ID=${id}`);
      
      if (!MongoObjectId.isValid(id)) {
        throw new BadRequestException(`ID danh m·ª•c con kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new MongoObjectId(id);
      
      // Find current subcategory
      const existingSubcategory = await this.subcategoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingSubcategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c con v·ªõi ID: ${id}`);
      }

      // Handle both string and boolean isActive values
      let currentStatus: boolean;
      if (typeof existingSubcategory.isActive === 'string') {
        currentStatus = existingSubcategory.isActive === 'true';
      } else {
        currentStatus = Boolean(existingSubcategory.isActive);
      }

      const newStatus = !currentStatus;
      console.log(`Current status: ${currentStatus}, New status: ${newStatus}`);

      // ‚úÖ Ki·ªÉm tra c√≥ s·∫£n ph·∫©m trong subcategory kh√¥ng - FIX LOGIC
      console.log(`üîç Checking products in subcategory ${objectId}...`);
      
      // Th·ª≠ nhi·ªÅu c√°ch query ƒë·ªÉ ƒë·∫£m b·∫£o
      const productsCount1 = await this.productRepository.count({
        where: { subcategoryId: objectId }
      });
      
      const productsCount2 = await this.productRepository.count({
        where: { subcategoryId: objectId.toString() }
      });

      // Query th·ª±c t·∫ø ƒë·ªÉ debug
      const allProducts = await this.productRepository.find({});
      console.log(`üìä Total products in DB: ${allProducts.length}`);
      
      const matchingProducts = allProducts.filter(product => {
        const productSubcategoryId = product.subcategoryId;
        console.log(`Product ${product.name}: subcategoryId = ${productSubcategoryId} (type: ${typeof productSubcategoryId})`);
        
        // So s√°nh nhi·ªÅu c√°ch
        return (
          productSubcategoryId?.toString() === objectId.toString() ||
          productSubcategoryId?.toString() === id ||
          (productSubcategoryId instanceof MongoObjectId && productSubcategoryId.equals(objectId))
        );
      });

      console.log(`üîç Products count method 1 (ObjectId): ${productsCount1}`);
      console.log(`üîç Products count method 2 (String): ${productsCount2}`);
      console.log(`üîç Products found by filter: ${matchingProducts.length}`);
      console.log(`üîç Matching products:`, matchingProducts.map(p => ({ name: p.name, subcategoryId: p.subcategoryId, isActive: p.isActive })));
      const productsInSubcategory = Math.max(productsCount1, productsCount2, matchingProducts.length);

      if (productsInSubcategory > 0) {
        // ‚úÖ Fix type-safe comparison for isActive
        const activeProducts = matchingProducts.filter(p => {
          if (typeof p.isActive === 'string') {
            return p.isActive === 'true';
          }
          return p.isActive === true;
        });
        
        console.log(`üîç Active products: ${activeProducts.length}`);

        if (activeProducts.length > 0) {
          throw new BadRequestException(
            `Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i danh m·ª•c con "${existingSubcategory.name}" v√¨ c√≤n ${activeProducts.length} s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng x·ª≠ l√Ω t·∫•t c·∫£ s·∫£n ph·∫©m trong danh m·ª•c con tr∆∞·ªõc.`
          );
        }
      }

      // Update status
      await this.subcategoryRepository.update(
        { _id: objectId },
        { 
          isActive: newStatus,
          updatedAt: new Date()
        }
      );

      // Get updated subcategory
      const updatedSubcategory = await this.subcategoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!updatedSubcategory) {
        throw new BadRequestException(`Kh√¥ng th·ªÉ l·∫•y danh m·ª•c con ƒë√£ c·∫≠p nh·∫≠t v·ªõi ID: ${id}`);
      }

      console.log(`‚úÖ Subcategory status toggled: ${existingSubcategory.name} -> ${newStatus ? 'active' : 'inactive'}`);
      return updatedSubcategory;

    } catch (error) {
      console.error('‚ùå Error toggling subcategory status:', error);
      
      if (error instanceof BadRequestException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói thay ƒë·ªïi tr·∫°ng th√°i danh m·ª•c con: ${error.message}`);
    }
  }

  // ‚úÖ Soft delete v·ªõi ki·ªÉm tra s·∫£n ph·∫©m ch√≠nh x√°c
  async softDelete(id: string): Promise<Subcategory> {
    try {
      console.log(`üóëÔ∏è Soft deleting subcategory: ID=${id}`);
      
      if (!MongoObjectId.isValid(id)) {
        throw new BadRequestException(`ID danh m·ª•c con kh√¥ng h·ª£p l·ªá: ${id}`);
      }

      const objectId = new MongoObjectId(id);
      
      // Find subcategory
      const existingSubcategory = await this.subcategoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!existingSubcategory) {
        throw new BadRequestException(`Kh√¥ng t√¨m th·∫•y danh m·ª•c con v·ªõi ID: ${id}`);
      }

      // ‚úÖ Ki·ªÉm tra c√≥ s·∫£n ph·∫©m trong subcategory kh√¥ng - SAME LOGIC AS TOGGLE
      console.log(`üîç Checking products in subcategory ${objectId} for deletion...`);
      
      const allProducts = await this.productRepository.find({});
      const matchingProducts = allProducts.filter(product => {
        const productSubcategoryId = product.subcategoryId;
        return (
          productSubcategoryId?.toString() === objectId.toString() ||
          productSubcategoryId?.toString() === id ||
          (productSubcategoryId instanceof MongoObjectId && productSubcategoryId.equals(objectId))
        );
      });

      console.log(`üîç Products in subcategory: ${matchingProducts.length}`);
      
      if (matchingProducts.length > 0) {
        // ‚úÖ Fix type-safe comparison for isActive
        const activeProducts = matchingProducts.filter(p => {
          if (typeof p.isActive === 'string') {
            return p.isActive === 'true';
          }
          return p.isActive === true;
        });
        
        if (activeProducts.length > 0) {
          throw new BadRequestException(
            `Kh√¥ng th·ªÉ x√≥a danh m·ª•c con "${existingSubcategory.name}" v√¨ c√≤n ${activeProducts.length} s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng x√≥a ho·∫∑c chuy·ªÉn t·∫•t c·∫£ s·∫£n ph·∫©m sang danh m·ª•c kh√°c tr∆∞·ªõc.`
          );
        }
      }

      // Always set to false when deleting
      await this.subcategoryRepository.update(
        { _id: objectId },
        { 
          isActive: false,
          updatedAt: new Date()
        }
      );

      // Get updated subcategory
      const updatedSubcategory = await this.subcategoryRepository.findOne({
        where: { _id: objectId }
      });

      if (!updatedSubcategory) {
        throw new BadRequestException(`Kh√¥ng th·ªÉ l·∫•y danh m·ª•c con ƒë√£ c·∫≠p nh·∫≠t v·ªõi ID: ${id}`);
      }

      console.log(`‚úÖ Subcategory soft deleted: ${existingSubcategory.name}`);
      return updatedSubcategory;

    } catch (error) {
      console.error('‚ùå Error soft deleting subcategory:', error);
      
      if (error instanceof BadRequestException) {
        throw error;
      }
      
      throw new BadRequestException(`L·ªói x√≥a danh m·ª•c con: ${error.message}`);
    }
  }

  async remove(id: string): Promise<void> {
    if (!MongoObjectId.isValid(id)) {
      throw new BadRequestException(`ID kh√¥ng h·ª£p l·ªá: ${id}`);
    }

    const objectId = new MongoObjectId(id);
    await this.subcategoryRepository.delete(objectId);
  }
  // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m thu·ªôc v·ªÅ m·ªôt subcategory
  async getProductsBySubcategory(subcategoryId: string): Promise<Product[]> {
    if (!MongoObjectId.isValid(subcategoryId)) {
      throw new BadRequestException(`ID danh m·ª•c con kh√¥ng h·ª£p l·ªá: ${subcategoryId}`);
    }
    const objectId = new MongoObjectId(subcategoryId);
    // Ch·ªâ l·∫•y s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông (isActive: true)
    return this.productRepository.find({
      where: { subcategoryId: objectId, isActive: true }
    });
  }


}

