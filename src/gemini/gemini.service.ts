import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { ProductsService } from '../products/products.service';

type ChatResult = {
    response: string;
    products?: any[];
    isProductQuery: boolean;
};

@Injectable()
export class GeminiService {
    private genAI: GoogleGenerativeAI;
    private readonly logger = new Logger(GeminiService.name); // ‚úÖ Th√™m Logger
    // Th·ª© t·ª± ∆∞u ti√™n model: nhanh ‚Üí nh·∫π
    private readonly MODEL_CANDIDATES = [
        process.env.GEMINI_MODEL || 'gemini-1.5-flash',
        'gemini-1.5-flash-8b',
    ];

    // ‚úÖ TH√äM MODEL CHUY√äN D·ª§NG CHO EMBEDDING
    private readonly EMBEDDING_MODEL = 'embedding-001';

    // Retry config
    private readonly MAX_RETRIES = 3;
    private readonly INITIAL_DELAY_MS = 1500; // 1.5s
    private readonly BACKOFF_FACTOR = 2;

    constructor(
        @Inject(forwardRef(() => ProductsService))
        private productsService: ProductsService
    ) {
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey) {
            throw new Error('GEMINI_API_KEY is not configured in environment variables');
        }
        this.genAI = new GoogleGenerativeAI(apiKey);
    }

    async chatWithProducts(userMessage: string): Promise<ChatResult> {
        try {
            // 1) Chu·∫©n b·ªã d·ªØ li·ªáu s·∫£n ph·∫©m (gi·ªõi h·∫°n context ƒë·ªÉ tr√°nh prompt qu√° d√†i)
            const allProducts = await this.productsService.findAll();
            const productsContext = (allProducts || [])
                .slice(0, 30)
                .map((p: any) => ({
                    id: p._id?.toString?.() ?? String(p._id),
                    name: p.name,
                    price: p.price,
                    sold: p.sold ?? undefined, // n·∫øu c√≥
                    description: p.description || '',
                    categoryId: p.categoryId ?? undefined,
                }));

            // 2) Prompt y√™u c·∫ßu tr·∫£ v·ªÅ JSON THU·∫¶N
            const prompt = this.buildPrompt(productsContext, userMessage);

            // 3) G·ªçi Gemini c√≥ retry + fallback model
            const aiResponseText = await this.generateWithRetryAndFallback(prompt);

            // 4) Parse JSON an to√†n
            const parsed = this.safeParseJson(aiResponseText);

            if (parsed?.isProductQuery && Array.isArray(parsed.productIds)) {
                // L·∫•y s·∫£n ph·∫©m theo id AI tr·∫£ v·ªÅ
                const idSet = new Set(parsed.productIds.map((x: any) => String(x)));
                const recommendedProducts = (allProducts || [])
                    .filter((p: any) => idSet.has(String(p._id)))
                    .map((p: any) => ({
                        _id: p._id,
                        id: p._id?.toString?.() ?? String(p._id),
                        name: p.name,
                        price: p.price,
                        description: p.description,
                        image:
                            p.imageUrls && p.imageUrls.length > 0 ? p.imageUrls[0] : null,
                        categoryId: p.categoryId,
                        subcategoryId: p.subcategoryId || '',
                        createdAt: p.createdAt,
                    }));

                return {
                    response: String(parsed.response ?? ''),
                    products: recommendedProducts,
                    isProductQuery: true,
                };
            }

            // Kh√¥ng ph·∫£i c√¢u h·ªèi s·∫£n ph·∫©m ‚Üí tr·∫£ l·ªùi t·ª± nhi√™n
            return {
                response: String(parsed?.response ?? aiResponseText ?? ''),
                isProductQuery: false,
            };
        } catch (err) {
            // Kh√¥ng throw n·ªØa ƒë·ªÉ UI kh√¥ng ‚Äúƒë·ªè‚Äù, tr·∫£ v·ªÅ fallback th√¢n thi·ªán
            console.error('[GeminiService] Fallback error:', err);
            return {
                response:
                    'Xin l·ªói, h·ªá th·ªëng AI ƒëang b·∫≠n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau √≠t ph√∫t ho·∫∑c m√¥ t·∫£ r√µ nhu c·∫ßu ƒë·ªÉ m√¨nh g·ª£i √Ω nhanh h∆°n nh√©.',
                isProductQuery: false,
            };
        }
    }

    async createEmbedding(text: string): Promise<number[]> {
        try {
            console.log(`üß† T·∫°o vector cho: "${text}"`);

            // G·ªçi Gemini API
            const model = this.genAI.getGenerativeModel({ model: 'embedding-001' });
            const result = await model.embedContent(text);
            
            // L·∫•y vector
            const vector = result.embedding.values;
            
            console.log(`‚úÖ T·∫°o ƒë∆∞·ª£c vector c√≥ ${vector.length} chi·ªÅu`);
            return vector;

        } catch (error) {
            console.error('‚ùå L·ªói t·∫°o vector:', error);
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o vector: ${error.message}`);
        }
    }

    /**
     * üìä CALCULATE SIMILARITY BETWEEN 2 VECTORS (COSINE SIMILARITY)
     */
    calculateSimilarity(vector1: number[], vector2: number[]): number {
        // Check if vectors have same length
        if (vector1.length !== vector2.length) {
            throw new Error('Vectors must have the same length');
        }

        // Calculate cosine similarity
        let dotProduct = 0;    // A ¬∑ B
        let magnitudeA = 0;    // |A|
        let magnitudeB = 0;    // |B|

        for (let i = 0; i < vector1.length; i++) {
            dotProduct += vector1[i] * vector2[i];
            magnitudeA += vector1[i] * vector1[i];
            magnitudeB += vector2[i] * vector2[i];
        }

        // Avoid division by zero
        if (magnitudeA === 0 || magnitudeB === 0) {
            return 0;
        }

        // Cosine similarity = (A¬∑B) / (|A| √ó |B|)
        const similarity = dotProduct / (Math.sqrt(magnitudeA) * Math.sqrt(magnitudeB));
        
        // Ensure result is between 0 and 1
        return Math.max(0, similarity);
    }


    // ---------- Helpers ----------

    private buildPrompt(productsContext: any[], userMessage: string) {
        // Y√™u c·∫ßu tr·∫£ v·ªÅ JSON THU·∫¶N (kh√¥ng markdown, kh√¥ng text ngo√†i JSON)
        // v√† n√™u r√µ schema k·ª≥ v·ªçng ƒë·ªÉ model ‚Äúv√†o khu√¥n‚Äù
        return `
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa c·ª≠a h√†ng TpShop (ƒëi·ªán tho·∫°i & laptop).

S·∫¢N PH·∫®M HI·ªÜN C√ì (r√∫t g·ªçn):
${JSON.stringify(productsContext, null, 2)}

Y√äU C·∫¶U:
- Ph√¢n t√≠ch C√ÇU H·ªéI c·ªßa kh√°ch sau ƒë√¢y.
- N·∫øu c√¢u h·ªèi LI√äN QUAN S·∫¢N PH·∫®M (t√¨m ki·∫øm/so s√°nh/t∆∞ v·∫•n):
  * So·∫°n n·ªôi dung t∆∞ v·∫•n ng·∫Øn g·ªçn, ƒë·ªãnh d·∫°ng li·ªát k√™ theo m·∫´u:
    - T√™n s·∫£n ph·∫©m
    - Gi√°: [gi√°] VNƒê
    - ƒê√£ b√°n: [s·ªë l∆∞·ª£ng] chi·∫øc (n·∫øu bi·∫øt)
  * Ch·ªâ ƒë·ªãnh danh s√°ch s·∫£n ph·∫©m ch·ªçn ra b·∫±ng m·∫£ng productIds (id ƒë√∫ng nh∆∞ trong d·ªØ li·ªáu).
  * Tr·∫£ v·ªÅ JSON theo SCHEMA:
    {
      "isProductQuery": true,
      "response": "n·ªôi dung t∆∞ v·∫•n li·ªát k√™",
      "productIds": ["id1", "id2", "..."]
    }

- N·∫øu KH√îNG li√™n quan s·∫£n ph·∫©m:
  * Tr·∫£ v·ªÅ JSON:
    {
      "isProductQuery": false,
      "response": "c√¢u tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán"
    }

QUY T·∫ÆC B·∫ÆT BU·ªòC:
- CH·ªà TR·∫¢ V·ªÄ **JSON THU·∫¶N** ƒë√∫ng m·ªôt ƒë·ªëi t∆∞·ª£ng, kh√¥ng k√®m b·∫•t k·ª≥ k√Ω t·ª±/th·∫ª/markdown n√†o kh√°c.
- Kh√¥ng ƒë∆∞·ª£c th√™m \`\`\`json ho·∫∑c vƒÉn b·∫£n b√™n ngo√†i JSON.

C√ÇU H·ªéI C·ª¶A KH√ÅCH: ${JSON.stringify(userMessage)}
`.trim();
    }

    private async generateWithRetryAndFallback(prompt: string): Promise<string> {
        let lastError: any;

        for (const modelName of this.MODEL_CANDIDATES) {
            const model = this.genAI.getGenerativeModel({ model: modelName });

            // retry v√≤ng tr√≤n cho t·ª´ng model
            let delay = this.INITIAL_DELAY_MS;

            for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {
                try {
                    const res = await model.generateContent({
                        contents: [{ role: 'user', parts: [{ text: prompt }] }],
                    });
                    const text = res?.response?.text?.();
                    if (!text || typeof text !== 'string') {
                        throw new Error('Empty response text');
                    }
                    return text;
                } catch (error: any) {
                    // L∆∞u error cu·ªëi
                    lastError = error;

                    const status = (error && (error.status || error.code)) ?? undefined;
                    const isOverloaded =
                        status === 503 ||
                        // m·ªôt s·ªë l·ªói m·∫°ng kh√¥ng c√≥ status ‚Üí coi nh∆∞ t·∫°m th·ªùi
                        error?.message?.includes?.('fetch') ||
                        error?.message?.includes?.('network') ||
                        error?.message?.includes?.('timeout');

                    const isLastAttempt = attempt === this.MAX_RETRIES;

                    // Log g·ªçn
                    console.warn(
                        `[GeminiService] ${modelName} attempt ${attempt}/${this.MAX_RETRIES} failed:`,
                        status || error?.message || error,
                    );

                    if (!isOverloaded || isLastAttempt) {
                        // Kh√¥ng ph·∫£i l·ªói t·∫°m th·ªùi ho·∫∑c ƒë√£ h·∫øt l∆∞·ª£t th·ª≠ ‚Üí chuy·ªÉn model ti·∫øp theo / tho√°t
                        break;
                    }

                    // Exponential backoff + jitter
                    const jitter = Math.floor(Math.random() * 400);
                    await new Promise((r) => setTimeout(r, delay + jitter));
                    delay *= this.BACKOFF_FACTOR;
                }
            }

            // n·∫øu fail h·∫øt retry cho model hi·ªán t·∫°i ‚Üí th·ª≠ model k·∫ø
            console.warn(`[GeminiService] Switch fallback model after failures: ${modelName}`);
        }

        // H·∫øt c·∫£ fallback model
        throw lastError ?? new Error('Gemini generation failed after retries & fallbacks');
    }

    private safeParseJson(raw: string) {
        if (!raw) return null;

        // Lo·∫°i b·ªè code blocks ```json ... ```
        let s = raw.replace(/```json\s*([\s\S]*?)\s*```/gi, '$1').trim();
        s = s.replace(/```([\s\S]*?)```/g, '$1').trim();

        // N·∫øu c√≥ text l·∫´n l·ªôn, c·ªë g·∫Øng tr√≠ch JSON kh·ªëi ƒë·∫ßu ti√™n
        // T√¨m d·∫•u { ... } ngo√†i c√πng
        const firstCurly = s.indexOf('{');
        const lastCurly = s.lastIndexOf('}');
        if (firstCurly !== -1 && lastCurly !== -1 && lastCurly > firstCurly) {
            s = s.slice(firstCurly, lastCurly + 1).trim();
        }

        try {
            const obj = JSON.parse(s);

            // Chu·∫©n ho√° ki·ªÉu d·ªØ li·ªáu t·ªëi thi·ªÉu
            if (typeof obj?.isProductQuery !== 'boolean') {
                obj.isProductQuery = !!obj?.productIds;
            }
            if (obj?.productIds && !Array.isArray(obj.productIds)) {
                obj.productIds = [String(obj.productIds)];
            }
            return obj;
        } catch (e) {
            console.warn('[GeminiService] JSON parse failed. Raw response:', raw);
            return { isProductQuery: false, response: raw };
        }
    }


}
