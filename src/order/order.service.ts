import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ObjectId } from 'mongodb';
import { Order, OrderStatus, PaymentStatus } from './entities/order.entity';
import { OrderItem, OrderItemStatus } from './entities/order-item.entity';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { ProductsService } from '../products/products.service';

@Injectable()
export class OrderService {
    constructor(
        @InjectRepository(Order)
        private orderRepository: Repository<Order>,
        @InjectRepository(OrderItem)
        private orderItemRepository: Repository<OrderItem>,
        private productsService: ProductsService,
    ) { }

    /**
     * üÜï T·∫†O ƒê∆†N H√ÄNG M·ªöI
     * 
     * V√ç D·ª§ INPUT:
     * userId = "670123456789abcdef123456"
     * createOrderDto = {
     *   "shippingInfo": {
     *     "fullName": "Nguy·ªÖn VƒÉn A",
     *     "email": "user@example.com",
     *     "phone": "0123456789",
     *     "address": "123 ƒê∆∞·ªùng ABC",
     *     "city": "H·ªì Ch√≠ Minh",
     *     "district": "Qu·∫≠n 1",
     *     "ward": "Ph∆∞·ªùng B·∫øn Ngh√©"
     *   },
     *   "paymentMethod": "COD",
     *   "note": "Giao h√†ng bu·ªïi chi·ªÅu",
     *   "items": [
     *     {
     *       "productId": "64abc123def456789",
     *       "variantId": "64abc123def456790",
     *       "quantity": 2
     *     },
     *     {
     *       "productId": "64abc123def456791",
     *       "variantId": "64abc123def456792", 
     *       "quantity": 1
     *     }
     *   ]
     * }
     *
     * V√ç D·ª§ OUTPUT:
     * {
     *   "_id": "671234567890abcdef123456",
     *   "orderNumber": "ORD-20241001-123456",
     *   "total": 75030000,
     *   "orderItems": [
     *     {
     *       "productName": "iPhone 15 Pro (256GB - V√†ng)",
     *       "unitPrice": 25000000,
     *       "quantity": 2,
     *       "subtotal": 50000000
     *     },
     *     {
     *       "productName": "Samsung Galaxy S24 (128GB - ƒêen)",
     *       "unitPrice": 25000000,
     *       "quantity": 1,
     *       "subtotal": 25000000
     *     }
     *   ]
     * }
     */
    async create(userId: string, createOrderDto: CreateOrderDto): Promise<Order> {
        try {
            // üîç B∆Ø·ªöC 1: VALIDATE - Ki·ªÉm tra c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng kh√¥ng
            if (!createOrderDto.items || createOrderDto.items.length === 0) {
                throw new BadRequestException('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng');
            }

            console.log('üõí Creating order with items:', createOrderDto.items);

            // üîç B∆Ø·ªöC 2: T·∫†O ORDER ITEMS - Chuy·ªÉn ƒë·ªïi t·ª´ frontend data sang database format
            const orderItems = await this.createOrderItemsFromRequest(createOrderDto.items);
            console.log('üì¶ Created order items:', orderItems.length);

            // üîç B∆Ø·ªöC 3: TR·ª™ STOCK - Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho cho t·ª´ng variant
            for (const item of createOrderDto.items) {
                // ‚úÖ VALIDATE variantId tr∆∞·ªõc khi g·ªçi decreaseVariantStock
                if (!item.variantId) {
                    throw new BadRequestException(`Thi·∫øu variantId cho s·∫£n ph·∫©m ${item.productId}`);
                }

                console.log(`üìâ Decreasing stock for variant: ${item.variantId}, quantity: ${item.quantity}`);
                
                // ‚úÖ B√¢y gi·ªù TypeScript bi·∫øt item.variantId kh√¥ng ph·∫£i undefined
                await this.productsService.decreaseVariantStock(item.variantId, item.quantity);
                
                console.log(`‚úÖ Stock decreased successfully for variant: ${item.variantId}`);
            }

            // üîç B∆Ø·ªöC 4: T√çNH TO√ÅN GI√Å TI·ªÄN
            // V√ç D·ª§: 
            // - Item 1: 25,000,000 * 2 = 50,000,000
            // - Item 2: 25,000,000 * 1 = 25,000,000  
            // - Subtotal: 75,000,000
            const subtotal = orderItems.reduce((sum, item) => sum + item.subtotal, 0);
            
            // V√ç D·ª§: H·ªì Ch√≠ Minh = free ship (0), t·ªânh kh√°c = 30,000
            const shippingFee = this.calculateShippingFee(createOrderDto.shippingInfo.city);
            
            // V√ç D·ª§: 75,000,000 + 0 = 75,000,000
            const total = subtotal + shippingFee;

            console.log('üí∞ Order calculations:', {
                subtotal: subtotal.toLocaleString('vi-VN'),     // "75.000.000"
                shippingFee: shippingFee.toLocaleString('vi-VN'), // "0"
                total: total.toLocaleString('vi-VN')            // "75.000.000"
            });

            // üîç B∆Ø·ªöC 5: T·∫†O ORDER RECORD
            // V√ç D·ª§: "ORD-20241001-123456"
            const orderNumber = await this.generateOrderNumber();
            
            const order = this.orderRepository.create({
                orderNumber,                                    // "ORD-20241001-123456"
                userId: new ObjectId(userId),                   // ObjectId("670123456789abcdef123456")
                shippingInfo: createOrderDto.shippingInfo,     // { fullName, email, phone, address, ... }
                paymentMethod: createOrderDto.paymentMethod,   // "COD"
                paymentStatus: PaymentStatus.PENDING,          // "PENDING"
                subtotal,                                       // 75000000
                shippingFee,                                    // 0
                discount: 0,                                    // 0 (m·∫∑c ƒë·ªãnh)
                total,                                          // 75000000
                status: OrderStatus.PENDING,                   // "PENDING"
                note: createOrderDto.note,                     // "Giao h√†ng bu·ªïi chi·ªÅu"
                createdAt: new Date(),                          // "2024-10-01T10:30:00.000Z"
                updatedAt: new Date()                           // "2024-10-01T10:30:00.000Z"
            });

            // üîç B∆Ø·ªöC 6: L∆ØU ORDER V√ÄO DATABASE
            const savedOrder = await this.orderRepository.save(order);
            console.log('‚úÖ Order saved with ID:', savedOrder._id);
            // Log: Order saved with ID: 671234567890abcdef123456

            // üîç B∆Ø·ªöC 7: L∆ØU ORDER ITEMS V√ÄO DATABASE
            // G√°n orderId cho t·ª´ng item r·ªìi l∆∞u
            for (const item of orderItems) {
                item.orderId = savedOrder._id;                  // Li√™n k·∫øt v·ªõi order v·ª´a t·∫°o
                await this.orderItemRepository.save(item);
            }

            console.log('‚úÖ Order items saved:', orderItems.length);
            // Log: Order items saved: 2

            // üîç B∆Ø·ªöC 8: TR·∫¢ V·ªÄ ORDER V·ªöI ITEMS ƒê·ªÇ FRONTEND HI·ªÇN TH·ªä
            return await this.findOneWithItems(savedOrder._id.toString());

        } catch (error) {
            console.error('‚ùå OrderService.create error:', error);
            throw new BadRequestException(error.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng');
        }
    }

    /**
     * üîß HELPER: T·∫†O ORDER ITEMS T·ª™ FRONTEND REQUEST V·ªöI GI·∫¢M GI√Å
     * 
     * V√ç D·ª§ INPUT:
     * items = [
     *   { "productId": "64abc123", "variantId": "64def456", "quantity": 2 }
     * ]
     * 
     * V√ç D·ª§ OUTPUT (v·ªõi gi·∫£m gi√°):
     * [
     *   {
     *     "productId": ObjectId("64abc123"),
     *     "productName": "iPhone 15 Pro (256GB - V√†ng)",
     *     "unitPrice": 24000000,      // Gi√° sau gi·∫£m 20%
     *     "quantity": 2,
     *     "subtotal": 48000000,       // 24tr * 2
     *     "originalPrice": 30000000,  // Gi√° g·ªëc
     *     "discountPercent": 20       // % gi·∫£m gi√°
     *   }
     * ]
     */
    private async createOrderItemsFromRequest(items: any[]): Promise<OrderItem[]> {
        const orderItems: OrderItem[] = [];

        for (const item of items) {
            console.log(`üîç Processing item:`, {
                productId: item.productId,     // "64abc123"
                variantId: item.variantId,     // "64def456" 
                quantity: item.quantity        // 2
            });

            // ‚úÖ VALIDATE: Ki·ªÉm tra frontend c√≥ g·ª≠i ƒë·ªß th√¥ng tin kh√¥ng
            if (!item.productId) {
                throw new BadRequestException('Thi·∫øu productId trong item');
            }

            if (!item.variantId) {
                throw new BadRequestException('Thi·∫øu variantId trong item');
            }

            if (!item.quantity || item.quantity <= 0) {
                throw new BadRequestException('Quantity ph·∫£i l·ªõn h∆°n 0');
            }

            // üîç L·∫§Y TH√îNG TIN PRODUCT T·ª™ DATABASE
            const productResult = await this.productsService.findOne(item.productId);

            if (!productResult || !productResult.product) {
                throw new BadRequestException(`S·∫£n ph·∫©m ${item.productId} kh√¥ng t·ªìn t·∫°i`);
            }

            const { product, variants } = productResult;

            // üîç T√åM VARIANT C·ª§ TH·ªÇ M√Ä USER CH·ªåN
            const selectedVariant = variants.find(v => v._id.toString() === item.variantId);

            if (!selectedVariant) {
                throw new BadRequestException(`Variant ${item.variantId} kh√¥ng t·ªìn t·∫°i cho s·∫£n ph·∫©m ${product.name}`);
            }

            // ‚úÖ T√çNH GI√Å SAU GI·∫¢M GI√Å
            const originalPrice = selectedVariant.price;                           // Gi√° g·ªëc: 30,000,000
            const discountPercent = selectedVariant.discountPercent || 0;          // % gi·∫£m gi√°: 20%
            const isOnSale = selectedVariant.isOnSale || false;                    // C√≥ ƒëang sale kh√¥ng: true
            
            // S·ª≠ d·ª•ng getter finalPrice ho·∫∑c t√≠nh to√°n th·ªß c√¥ng
            let finalPrice = originalPrice;
            if (isOnSale && discountPercent > 0) {
                finalPrice = Math.round(originalPrice * (1 - discountPercent / 100));  // 24,000,000
            }

            const savedAmount = originalPrice - finalPrice;                        // Ti·∫øt ki·ªám: 6,000,000

            console.log(`‚úÖ Found product and variant with discount:`, {
                productName: product.name,                                         // "iPhone 15 Pro"
                variantColor: selectedVariant.color,                               // "V√†ng"
                variantStorage: selectedVariant.storage,                           // "256GB"
                originalPrice: originalPrice.toLocaleString('vi-VN'),              // "30.000.000"
                discountPercent: `${discountPercent}%`,                           // "20%"
                finalPrice: finalPrice.toLocaleString('vi-VN'),                   // "24.000.000"
                savedAmount: savedAmount.toLocaleString('vi-VN'),                 // "6.000.000"
                isOnSale,                                                         // true
                variantStock: selectedVariant.stock                               // 100
            });

            // ‚úÖ KI·ªÇM TRA KHO C√ì ƒê·ª¶ H√ÄNG KH√îNG
            if (selectedVariant.stock < item.quantity) {
                throw new BadRequestException(
                    `Variant ${selectedVariant.color} - ${selectedVariant.storage} ch·ªâ c√≤n ${selectedVariant.stock} trong kho, kh√¥ng ƒë·ªß ${item.quantity}`
                );
            }

            // üí∞ T√çNH TI·ªÄN T·ª™ GI√Å SAU GI·∫¢M GI√Å
            // V√ç D·ª§: 24,000,000 * 2 = 48,000,000 (thay v√¨ 30tr * 2 = 60tr)
            const subtotal = finalPrice * item.quantity;

            // üèóÔ∏è T·∫†O ORDER ITEM V·ªöI GI√Å ƒê√É GI·∫¢M
            const orderItem = this.orderItemRepository.create({
                productId: new ObjectId(item.productId),                           // ObjectId("64abc123")
                productName: `${product.name} (${selectedVariant.storage} - ${selectedVariant.color})`, // "iPhone 15 Pro (256GB - V√†ng)"
                productImageUrl: Array.isArray(selectedVariant.imageUrls) && selectedVariant.imageUrls.length > 0
                    ? selectedVariant.imageUrls[0]                                // "https://example.com/iphone-gold.jpg"
                    : '/placeholder.jpg',                                         // Fallback image
                unitPrice: finalPrice,                                            // ‚úÖ Gi√° sau gi·∫£m: 24,000,000
                quantity: item.quantity,                                          // 2
                subtotal,                                                         // ‚úÖ T·ªïng sau gi·∫£m: 48,000,000
                status: OrderItemStatus.ACTIVE,                                   // "ACTIVE"
                variantId: item.variantId                                        // "64def456" (ƒë·ªÉ tracking)
            });

            // ‚úÖ Th√™m th√¥ng tin gi·∫£m gi√° ƒë·ªÉ tracking (n·∫øu OrderItem entity h·ªó tr·ª£)
            if (isOnSale && discountPercent > 0) {
                (orderItem as any).originalPrice = originalPrice;                 // Gi√° g·ªëc: 30,000,000
                (orderItem as any).discountPercent = discountPercent;             // % gi·∫£m: 20%
                (orderItem as any).savedAmount = savedAmount;                     // Ti·∫øt ki·ªám: 6,000,000
                (orderItem as any).isOnSale = isOnSale;                          // true
            }

            console.log(`‚úÖ Created OrderItem with discount:`, {
                productName: orderItem.productName,                              // "iPhone 15 Pro (256GB - V√†ng)"
                originalPrice: originalPrice.toLocaleString('vi-VN'),            // "30.000.000"
                discountPercent: `${discountPercent}%`,                         // "20%"
                finalPrice: orderItem.unitPrice.toLocaleString('vi-VN'),        // "24.000.000"
                quantity: orderItem.quantity,                                    // 2
                subtotal: orderItem.subtotal.toLocaleString('vi-VN'),           // "48.000.000"
                totalSaved: (savedAmount * item.quantity).toLocaleString('vi-VN') // "12.000.000"
            });

            orderItems.push(orderItem);
        }

        return orderItems;
    }

    /**
     * üöö T√çNH PH√ç SHIP D·ª∞A TR√äN TH√ÄNH PH·ªê
     * 
     * V√ç D·ª§:
     * - "H·ªì Ch√≠ Minh" ‚Üí 0 VNƒê (free ship)
     * - "H√† N·ªôi" ‚Üí 0 VNƒê (free ship)  
     * - "ƒê√† N·∫µng" ‚Üí 30,000 VNƒê
     */
    private calculateShippingFee(city: string): number {
        const freeShippingCities = [
            'h·ªì ch√≠ minh',
            'h√† n·ªôi',
            'tp. h·ªì ch√≠ minh',
            'th√†nh ph·ªë h·ªì ch√≠ minh'
        ];

        const normalizedCity = city.trim().toLowerCase();
        const isFreeShipping = freeShippingCities.some(freeCity =>
            normalizedCity.includes(freeCity)
        );

        const fee = isFreeShipping ? 0 : 30000;

        console.log(`üöö Shipping fee calculation:`, {
            inputCity: city,                    // "H·ªì Ch√≠ Minh"
            normalizedCity,                     // "h·ªì ch√≠ minh"
            isFreeShipping,                     // true
            fee: fee.toLocaleString('vi-VN')    // "0"
        });

        return fee;
    }

    /**
     * üî¢ T·∫†O M√É ƒê∆†N H√ÄNG DUY NH·∫§T
     * 
     * V√ç D·ª§: "ORD-20241001-123456"
     * Format: ORD-YYYYMMDD-XXXXXX (X = timestamp + random)
     */
    private async generateOrderNumber(): Promise<string> {
        const today = new Date();
        const dateStr = today.toISOString().slice(0, 10).replace(/-/g, ''); // "20241001"
        const timeStr = Date.now().toString().slice(-6);                     // "123456" (6 s·ªë cu·ªëi c·ªßa timestamp)
        const randomStr = Math.floor(Math.random() * 100).toString().padStart(2, '0'); // "78"

        const orderNumber = `ORD-${dateStr}-${timeStr}${randomStr}`;         // "ORD-20241001-12345678"

        console.log(`üî¢ Generated order number: ${orderNumber}`);

        return orderNumber;
    }

    // üìã L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
    async findAllByUser(userId: string): Promise<Order[]> {
        return await this.orderRepository.find({
            where: { userId: new ObjectId(userId) },
            order: { createdAt: 'DESC' }
        });
    }

    // üìã L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (Admin)
    async findAll(): Promise<Order[]> {
        return await this.orderRepository.find({
            order: { createdAt: 'DESC' }
        });
    }

    // üîç L·∫•y chi ti·∫øt ƒë∆°n h√†ng
    async findOne(id: string, userId?: string): Promise<Order> {
        const where: any = { _id: new ObjectId(id) };
        if (userId) {
            where.userId = new ObjectId(userId);
        }

        const order = await this.orderRepository.findOne({ where });

        if (!order) {
            throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng');
        }

        return order;
    }

    // üîç L·∫•y ƒë∆°n h√†ng v·ªõi items
    async findOneWithItems(id: string, userId?: string): Promise<Order> {
        const order = await this.findOne(id, userId);

        // Load order items
        const orderItems = await this.orderItemRepository.find({
            where: { orderId: order._id }
        });

        (order as any).orderItems = orderItems;
        return order;
    }

    // ‚úèÔ∏è C·∫≠p nh·∫≠t ƒë∆°n h√†ng (Admin only)
    async update(id: string, updateOrderDto: UpdateOrderDto): Promise<Order> {
        const order = await this.findOne(id);

        Object.assign(order, updateOrderDto);

        // Business rule: Delivered => Paid
        if (
            updateOrderDto.status &&
            updateOrderDto.status.toString().toUpperCase() === 'DELIVERED'
        ) {
            order.paymentStatus = PaymentStatus.PAID;
        }

        order.updatedAt = new Date();

        return await this.orderRepository.save(order);
    }

    // ‚ùå H·ªßy ƒë∆°n h√†ng
    async cancel(id: string, userId: string, reason?: string): Promise<Order> {
        const order = await this.findOneWithItems(id, userId);

        if (!order.isCancellable) {
            throw new BadRequestException('Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng n√†y');
        }

        order.status = OrderStatus.CANCELLED;
        order.note = reason || order.note;
        order.updatedAt = new Date();

        return await this.orderRepository.save(order);
    }

}